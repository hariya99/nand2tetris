// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 111 a c1c2c3c4c5c6 d1d2d3 j1j2j3
    // i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    
    // inverted 15th bit ensures that mux outputs a instruction when it is fed
    Not(in=instruction[15], out=insType);
    Mux16(a=aluOut, b=instruction, sel=insType, out=aInput);

    // AReg is loaded if it is A instruction or 
    // C instruction and d1 bit of c instruction is 1
    Or(a=insType, b=instruction[5], out=loadA);
    ARegister(in=aInput, load=loadA, out=outA, out[0..14]=addressM);

    // write to M if it is C instruction and d3 bit is 1 
    And(a=instruction[15], b=instruction[3], out=writeM);

    // D register is loaded if it is C instruction and d2 bit is 1 
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=inAlu1);

    // Alu input is M if it is C instruction and a bit is 1
    And(a=instruction[15], b=instruction[12], out=aOrm);
    Mux16(a=outA, b=inM, sel=aOrm, out=inAlu2);


    // ALU
    ALU(x=inAlu1, 
        y=inAlu2, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluOut, out=outM, zr=zrOut, ng=ngOut);

 
    // alu output is positive
    Not(in=ngOut, out=positive);
    Not(in=zrOut, out=notZero);
    
    //JGT when c instruction and j3=1 and positive
    And(a=instruction[15], b=instruction[0], out=pass1);
    And(a=positive, b=notZero, out=sPositive);
    And(a=pass1, b=sPositive, out=jgt);

    //JEQ when c instruction and j2=1 and zero
    And(a=instruction[15], b=instruction[1], out=pass2);
    And(a=pass2, b=zrOut, out=jeq);

    //JLT when c instruction and j1=1 and negative
    And(a=instruction[15], b=instruction[2], out=pass3);
    And(a=pass3, b=ngOut, out=jlt);   

    // load PC if JGT|JEQ|JGE|JLT|JNE|JLE|JMP
    Or(a=jgt, b=jeq, out=ld);
    Or(a=ld, b=jlt, out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

}